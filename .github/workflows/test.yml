name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20.x'
  MONGO_ROOT_USERNAME: ecfr_admin
  MONGO_ROOT_PASSWORD: ecfr_secure_password_2024
  MONGO_DATABASE: ecfr_db
  ELASTICSEARCH_PORT: 9200
  LOG_LEVEL: error

jobs:
  test-shared:
    name: Test Shared Modules
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: ${{ env.MONGO_ROOT_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ env.MONGO_ROOT_PASSWORD }}
          MONGO_INITDB_DATABASE: ${{ env.MONGO_DATABASE }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        ports:
          - 9200:9200
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '**/package.json'
    
    - name: Sync shared modules
      run: ./sync-shared.sh
    
    - name: Run shared module tests
      env:
        NODE_ENV: test
      run: |
        npm test -- --coverage --coverageDirectory=coverage/shared
    
    - name: Upload coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage-shared
        path: coverage/shared

  test-backend:
    name: Test Backend Service
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: ${{ env.MONGO_ROOT_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ env.MONGO_ROOT_PASSWORD }}
          MONGO_INITDB_DATABASE: ${{ env.MONGO_DATABASE }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        ports:
          - 9200:9200
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '**/package.json'
    
    - name: Sync shared modules
      run: ./sync-shared.sh
    
    - name: Install dependencies
      run: |
        cd services/backend
        npm install
    
    - name: Run backend tests
      env:
        NODE_ENV: test
        BACKEND_PORT: 3001
        GEMINI_API_KEY: test_key
        CHAT_DEFAULT_MODEL: gemini-2.0-flash-exp
        CHAT_TIMEOUT_SECONDS: 120
      run: |
        npm test -- --coverage --coverageDirectory=../../coverage/backend
    
    - name: Upload coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage-backend
        path: coverage/backend

  test-data-analysis:
    name: Test Data Analysis Service
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: ${{ env.MONGO_ROOT_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ env.MONGO_ROOT_PASSWORD }}
          MONGO_INITDB_DATABASE: ${{ env.MONGO_DATABASE }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '**/package.json'
    
    - name: Sync shared modules
      run: ./sync-shared.sh
    
    - name: Install dependencies
      run: |
        cd services/data-analysis
        npm install
    
    - name: Run data analysis tests
      env:
        NODE_ENV: test
        ANALYSIS_MODEL: gemini-2.0-flash-exp
        ANALYSIS_BATCH_SIZE: 5
        ANALYSIS_TIMEOUT: 300000
      run: |
        cd services/data-analysis
        npm test -- --coverage --coverageDirectory=../../coverage/data-analysis
    
    - name: Upload coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage-data-analysis
        path: coverage/data-analysis

  test-data-refresh:
    name: Test Data Refresh Service
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: ${{ env.MONGO_ROOT_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ env.MONGO_ROOT_PASSWORD }}
          MONGO_INITDB_DATABASE: ${{ env.MONGO_DATABASE }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        ports:
          - 9200:9200
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '**/package.json'
    
    - name: Sync shared modules
      run: ./sync-shared.sh
    
    - name: Install dependencies
      run: |
        cd services/data-refresh
        npm install
    
    - name: Run data refresh tests
      env:
        NODE_ENV: test
        REFRESH_INTERVAL_HOURS: 24
      run: |
        cd services/data-refresh
        npm test -- --coverage --coverageDirectory=../../coverage/data-refresh
    
    - name: Upload coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage-data-refresh
        path: coverage/data-refresh

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '**/package.json'
    
    - name: Install dependencies
      run: |
        cd services/frontend
        npm install
    
    - name: Run frontend tests
      env:
        NODE_ENV: test
      run: |
        cd services/frontend
        npm test -- --coverage --coverageDirectory=../../coverage/frontend --passWithNoTests
    
    - name: Upload coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage-frontend
        path: coverage/frontend

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install ESLint
      run: npm install -g eslint
    
    - name: Run ESLint
      run: |
        for service in backend data-refresh data-analysis frontend; do
          echo "Linting $service"
          if [ -f "services/$service/.eslintrc.js" ] || [ -f "services/$service/.eslintrc.json" ]; then
            eslint services/$service --ext .js,.jsx,.ts,.tsx --ignore-pattern node_modules --ignore-pattern shared || true
          else
            echo "No ESLint config found for $service, skipping..."
          fi
        done

  build:
    name: Build Services
    runs-on: ubuntu-latest
    needs: [test-shared, test-backend, test-data-analysis, test-data-refresh, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: |
        ./sync-shared.sh
        docker-compose build --parallel
    
    - name: Check Docker images
      run: docker-compose config --images

  coverage-report:
    name: Combine Coverage Reports
    needs: [test-shared, test-backend, test-data-analysis, test-data-refresh, test-frontend]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all coverage reports
      uses: actions/download-artifact@v3
      with:
        path: coverage
    
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install nyc
      run: npm install -g nyc
    
    - name: Merge coverage reports
      run: |
        mkdir -p coverage-final
        find coverage -name '*.json' -path '*/coverage-final/*' -exec cp {} coverage-final/ \; 2>/dev/null || true
        if [ "$(ls -A coverage-final)" ]; then
          nyc merge coverage-final coverage-final/merged-coverage.json
          nyc report --reporter=text --reporter=html --reporter=json-summary --temp-dir=coverage-final
        else
          echo "No coverage reports found to merge"
        fi
    
    - name: Upload combined coverage
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: coverage-combined
        path: coverage-final
    
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request' && success()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          const summaryPath = path.join('coverage-final', 'coverage-summary.json');
          
          if (fs.existsSync(summaryPath)) {
            const coverage = fs.readFileSync(summaryPath, 'utf8');
            const coverageData = JSON.parse(coverage);
            const total = coverageData.total;
            
            const comment = `## Test Coverage Report
            
            | Metric | Coverage |
            |--------|----------|
            | Statements | ${total.statements.pct.toFixed(2)}% |
            | Branches | ${total.branches.pct.toFixed(2)}% |
            | Functions | ${total.functions.pct.toFixed(2)}% |
            | Lines | ${total.lines.pct.toFixed(2)}% |
            
            _Coverage threshold: 80%_
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }