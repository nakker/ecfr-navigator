name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        ports:
          - 9200:9200
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    
    - name: Install test dependencies
      run: |
        cd tests
        npm install
    
    - name: Sync shared modules
      run: ./sync-shared.sh
    
    - name: Install service dependencies
      run: |
        for service in backend data-refresh data-analysis; do
          echo "Installing dependencies for $service"
          cd services/$service
          npm install
          cd ../..
        done
    
    - name: Run backend tests
      env:
        ELASTICSEARCH_HOST: localhost
        ELASTICSEARCH_PORT: 9200
        NODE_ENV: test
      run: |
        cd tests
        npm run test:ci
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./tests/coverage/lcov.info
        flags: backend
        name: backend-coverage

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    
    - name: Install test dependencies
      run: |
        cd tests
        npm install
    
    - name: Install frontend dependencies
      run: |
        cd services/frontend
        npm install
    
    - name: Run frontend tests
      run: |
        cd tests
        npm run test:frontend -- --coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./services/frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Install ESLint
      run: npm install -g eslint
    
    - name: Run ESLint
      run: |
        for service in backend data-refresh data-analysis frontend; do
          echo "Linting $service"
          eslint services/$service --ext .js,.jsx,.ts,.tsx --ignore-pattern node_modules || true
        done

  build:
    name: Build Services
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: |
        ./sync-shared.sh
        docker-compose build --parallel
    
    - name: Check Docker images
      run: docker-compose config --images